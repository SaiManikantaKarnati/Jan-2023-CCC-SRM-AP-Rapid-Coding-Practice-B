R 306 - Binary Search Tree Traversals

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node *left;
    struct node *right;
}Node;

Node* creation(int data)
{
    Node* newnode = (Node*)malloc(sizeof(Node));
    newnode -> data = data;
    newnode -> left = NULL;
    newnode -> right = NULL;
    return newnode;
}

Node* insertion(Node *root, int val)
{
    if(root == NULL)
        return creation(val);
    if(val <= root->data)
        root -> left = insertion(root->left, val);
    if(val > root->data)
        root -> right = insertion(root->right, val);
    return root;
}

void preorder(Node* root)
{
    if(root == NULL)    
        return;
    printf("%d ", root->data);
    preorder(root->left);
    preorder(root->right);
}

void inorder(Node* root)
{
    if(root == NULL)    
        return;
    inorder(root->left);
    printf("%d ", root->data);
    inorder(root->right);
}

void postorder(Node* root)
{
    if(root == NULL)    
        return;
    
    postorder(root->left);
    postorder(root->right);
    printf("%d ", root->data);
}


int main() {
    int val,i,n;
    scanf("%d", &n);
    Node* root = NULL;
    for(i=0;i<n;i++) 
    {
        scanf("%d",&val);
        root = insertion(root,val);
    }
    preorder(root);
    printf("\n");
    inorder(root);
    printf("\n");
    postorder(root);
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}
